)
# finally, there are 271 dummy animals left without parents. Assign them genetic group of their offspring:
for (ii in 1:nrow(d.ped)){
if (is.na(d.ped$GG[ii])){
d.ped$GG[ii] <- d.ped[match(d.ped$ringnr[ii],d.ped$father),"GG"]
}
if (is.na(d.ped$GG[ii])){
d.ped$GG[ii] <- d.ped[match(d.ped$ringnr[ii],d.ped$mother),"GG"]
}
}
# Repeat this one more time to fill the gaps:
for (ii in 1:nrow(d.ped)){
if (is.na(d.ped$GG[ii])){
d.ped$GG[ii] <- d.ped[match(d.ped$ringnr[ii],d.ped$father),"GG"]
}
if (is.na(d.ped$GG[ii])){
d.ped$GG[ii] <- d.ped[match(d.ped$ringnr[ii],d.ped$mother),"GG"]
}
}
# if mother is missing, replace it by GG, if father is missing, replace it by GG
d.ped[is.na(d.ped$mother.id), "mother.id"] <- d.ped[is.na(d.ped$mother.id), "GG"]
d.ped[is.na(d.ped$father.id), "father.id"] <- d.ped[is.na(d.ped$father.id), "GG"]
# need q_{ij} values for each individual; use ggcontrib() from nadiv package
library(nadiv)
Q <- ggcontrib(d.ped[, 4:6], ggroups = c("inner", "outer","other"))
d.ped <- cbind(d.ped, Q)
# now copy this genetic group information into d.morph
d.morph$inner <- d.ped[match(d.morph$id,d.ped$id),"inner"]
d.morph$outer <- d.ped[match(d.morph$id,d.ped$id),"outer"]
d.morph$other <- d.ped[match(d.morph$id,d.ped$id),"other"]
d.morph$outer[16:100]
# to find out how many animals had inner/outer/other natal island
d.tmp <- d.natal[d.natal$ringnr %in% d.morph$ringnr,]
table(d.tmp$islandIO)
head(d.morph)
library(readr)
library(dplyr)
library(stringr)
library(ggplot2)
library(qqman)
# For real pheno (mass/wing) generation of GWAS$pheno.txt
# For real pheno (mass/wing) generation of GWAS$pheno.txt
#tmp <- morph %>%
# For real pheno (mass/wing) generation of GWAS$pheno.txt
#tmp <- morph %>%
#    mutate(FID = ringnr) %>%
# For real pheno (mass/wing) generation of GWAS$pheno.txt
#tmp <- morph %>%
#    mutate(FID = ringnr) %>%
#    rename(IID = ringnr) %>%
# For real pheno (mass/wing) generation of GWAS$pheno.txt
#tmp <- morph %>%
#    mutate(FID = ringnr) %>%
#    rename(IID = ringnr) %>%
#    dplyr::select(FID, IID, "thr_wing") %>%
# For generation of GWAS$pheno.txt simulated phenotype
# For generation of GWAS$pheno.txt simulated phenotype
#{
# For generation of GWAS$pheno.txt simulated phenotype
#{
#arch <- 10
# For generation of GWAS$pheno.txt simulated phenotype
#{
#arch <- 10
#pheno_path <- paste0("C:/Users/gard_/Documents/MasterThesis/Code/Data/Phenotypes/70k/Sim_pheno_70k_arch_",arch,".csv")
#setwd("C:/Users/gard_/Documents/MasterThesis/Code/GEMMA/GWAS_pheno")
#setwd("C:/Users/gard_/Documents/MasterThesis/Code/GEMMA/GWAS_pheno")
#tmp <- phenos %>%
#setwd("C:/Users/gard_/Documents/MasterThesis/Code/GEMMA/GWAS_pheno")
#tmp <- phenos %>%
#    mutate(FID = ringnr) %>%
#setwd("C:/Users/gard_/Documents/MasterThesis/Code/GEMMA/GWAS_pheno")
#tmp <- phenos %>%
#    mutate(FID = ringnr) %>%
#    rename(IID = ringnr) %>%
#setwd("C:/Users/gard_/Documents/MasterThesis/Code/GEMMA/GWAS_pheno")
#tmp <- phenos %>%
#    mutate(FID = ringnr) %>%
#    rename(IID = ringnr) %>%
#    dplyr::select(FID, IID, "pheno") %>%
library(nadiv)
library(pedigree)
library(MASS)
library(MCMCpack)
library(MCMCglmm)
# This is a self-made package that I send you to install locally:
library(SMisc) # Take contact if you do not have this
library(dplyr)
library(INLA)
library(feather)
# Load the CSV file where 10 folds for ringnr train and validation is
setwd("C:/Users/gard_/Documents/MasterThesis/Code/Data/CVfolds")
cv_folds <- read.csv('cv_folds_tarsus_180k.csv')
# Data preparation helper script:
setwd("C:/Users/gard_/Documents/MasterThesis/Code")
source("h_dataPrep.r")
# Some data wranging to ensure that the IDs in the data correspond to the IDs in the A and G-matrices (nothing to worry about):
# indicates that some IDs are missing:
#d.map[3110:3125, ]
# from this we see the number of animals
Nanimals <- 3116
# remove missing values (mass)
d.morph <- filter(d.morph, !is.na(eval(as.symbol(tarsus))))
# names(d.morph)
# In the reduced pedigree only Nanimals out of the 3147 IDs are preset.
d.map$IDC <- 1:nrow(d.map)
d.morph$IDC <- d.map[match(d.morph$ringnr, d.map$ringnr), "IDC"]
### Prepare for use in INLA -
d.morph$IDC4 <- d.morph$IDC3 <- d.morph$IDC2 <- d.morph$IDC
formula.tarsus <- tarsus ~ sex + FGRM + month + age + outer + other +
f(hatchisland, model = "iid", hyper = list(
prec = list(initial = log(1), prior = "pc.prec", param = c(1, 0.05))
)) +
f(hatchyear, model = "iid", hyper = list(
prec = list(initial = log(1), prior = "pc.prec", param = c(1, 0.05))
)) +
f(IDC, model = "iid", hyper = list(
prec = list(initial = log(1), prior = "pc.prec", param = c(1, 0.05))
)) +
f(IDC2,
values = 1:3116, model = "generic0",
Cmatrix = Cmatrix,
constr = TRUE,
hyper = list(
# The priors are relevant, need to discuss
prec = list(initial = log(0.5), prior = "pc.prec", param = c(sqrt(2), 0.05))
)
)
corr_cvs_EG <- c()
corr_cvs_G <- c()
# Relatedness matrix from Henrik (vanRaden method 1) where +0.01 was already added to diagnoal!
d.Gmatrix <- read.table(paste("C:/Users/gard_/Documents/MasterThesis/Code/Data/", "gghatvr3.triangle.g", sep = ""), header = F, sep = " ")
# G is a sparse matrix object. We can also verify that it is symmetric (sometimes some numerical problems lead to non-symmetry)
G <- sparseMatrix(i = d.Gmatrix[, 1], j = d.Gmatrix[, 2], x = d.Gmatrix[, 3], symmetric = T)
# Indicing to keep structure
G[, ] <- as.numeric(G[, ])
isSymmetric(G)
# Again extract the rows and columns for the individuals in the data set that we analyse
dim(G)
GG <- G[d.map[1:3116, 3], d.map[1:3116, 3]]
# To ensure that the matrix is positive definite, we do a computational trick (proposed by vanRaden 2008, see https://doi.org/10.3168/jds.2007-0980 :)
# diag(n) returns (nxn) identity matrix
AAA <- diag(dim(GG)[1])
GGG <- GG * 0.99 + 0.01 * AAA # replace by Identity matrix
# Need to derive the inverse to give to INLA
Cmatrix <- solve(GGG)
if (!isSymmetric(Cmatrix)) {
Cmatrix <- forceSymmetric(Cmatrix)
}
for (i in 0:9) {
# get CV indices
#ringnr_train <- pull(arrow::read_feather(paste(data_path, "temp/ringnr_train_", i, ".feather", sep = "")), "ringnr")
#ringnr_test <- pull(arrow::read_feather(paste(data_path, "temp/ringnr_test_", i, ".feather", sep = "")), "ringnr")
ringnr_train <- cv_folds %>%
filter(Fold == (i + 1) & Set == "train") %>%
pull(ringnr)
ringnr_test <- cv_folds %>%
filter(Fold == (i + 1) & Set == "test") %>%
pull(ringnr)
# make test and train set
d.morph_train <- filter(d.morph, !ringnr %in% ringnr_test)
d.morph_test <- filter(d.morph, ringnr %in% ringnr_test)
n_train <- dim(d.morph_train)[1]
n_test <- dim(d.morph_test)[1]
N <- n_train + n_test
# Save the phenotypic value in the test set, if we only looking at genetic effects (two-step) we take the average
pheno_test_EG <- d.morph_test[, tarsus]
pheno_test <- as.data.frame(d.morph_test %>%
group_by(ringnr) %>%
summarize(
mean_pheno = mean(eval(tarsus))
))[, "mean_pheno"]
# However, INLA has no predict function, so have to fill the test-values with NAs and then merge it back into the train-set
d.morph_test[, tarsus] <- NA
d.morph_train <- union_all(d.morph_train, d.morph_test)
names(d.morph_train)
# All individuals
idxs <- 1:Nanimals
# get the indices corresponding to the individuals in the test set
idxs_test <- which(d.map$ringnr %in% unique(ringnr_test))
##################################################################
### Run INLA based on the GBLUP approach
###
### To this end, use the GRM (genetic relatedness matrix) in the animal model
###
### !!! This is very slow - account for at least 20-30min waiting time before inla terminates !!!
##################################################################
##
## INLA formula
##
# Here we use body mass as the response, and some fixed and random effects:
cat("Starting INLA\n")
model1.tarsus <- inla(
formula = formula.tarsus, family = "gaussian",
data = d.morph_train,
control.family = list(hyper = list(theta = list(initial = log(0.5), prior = "pc.prec", param = c(sqrt(2), 0.05)))),
control.compute = list(dic = F, return.marginals = FALSE), verbose = TRUE
# control.compute=list(config = TRUE)
)
cat("INLA DONE\n")
# get predicted phenotype
#preds_EG <- model1.wing$summary.fitted.values$mean[(n_train + 1):N]
# Get breeding values
preds <- model1.tarsus$summary.random$IDC2$mode[idxs_test]
# calculate and save metrics
#corr_EG <- cor(preds_EG, pheno_test_EG, method = "pearson")
corr <- cor(preds, pheno_test, method = "pearson")
cat("result of fold", i, "corr_G:", corr, "\n")
corr_cvs_G <- c(corr_cvs_G, corr)
#corr_cvs_EG <- c(corr_cvs_EG, corr_EG)
}
#write.csv(EG_csv, file = "corr_EG_WING.csv", row.names = FALSE)
write.csv(BV_csv, file = BV_file_name, row.names = FALSE)
# remove missing values (mass)
d.morph <- filter(d.morph, !is.na(eval(as.symbol(tarsus))))
# remove missing values (mass)
d.morph <- filter(d.morph, !is.na(eval(tarsus)))
# names(d.morph)
# In the reduced pedigree only Nanimals out of the 3147 IDs are preset.
d.map$IDC <- 1:nrow(d.map)
d.morph$IDC <- d.map[match(d.morph$ringnr, d.map$ringnr), "IDC"]
### Prepare for use in INLA -
d.morph$IDC4 <- d.morph$IDC3 <- d.morph$IDC2 <- d.morph$IDC
formula.tarsus <- tarsus ~ sex + FGRM + month + age + outer + other +
f(hatchisland, model = "iid", hyper = list(
prec = list(initial = log(1), prior = "pc.prec", param = c(1, 0.05))
)) +
f(hatchyear, model = "iid", hyper = list(
prec = list(initial = log(1), prior = "pc.prec", param = c(1, 0.05))
)) +
f(IDC, model = "iid", hyper = list(
prec = list(initial = log(1), prior = "pc.prec", param = c(1, 0.05))
)) +
f(IDC2,
values = 1:3116, model = "generic0",
Cmatrix = Cmatrix,
constr = TRUE,
hyper = list(
# The priors are relevant, need to discuss
prec = list(initial = log(0.5), prior = "pc.prec", param = c(sqrt(2), 0.05))
)
)
corr_cvs_EG <- c()
corr_cvs_G <- c()
# Relatedness matrix from Henrik (vanRaden method 1) where +0.01 was already added to diagnoal!
d.Gmatrix <- read.table(paste("C:/Users/gard_/Documents/MasterThesis/Code/Data/", "gghatvr3.triangle.g", sep = ""), header = F, sep = " ")
# G is a sparse matrix object. We can also verify that it is symmetric (sometimes some numerical problems lead to non-symmetry)
G <- sparseMatrix(i = d.Gmatrix[, 1], j = d.Gmatrix[, 2], x = d.Gmatrix[, 3], symmetric = T)
# Indicing to keep structure
G[, ] <- as.numeric(G[, ])
isSymmetric(G)
# Again extract the rows and columns for the individuals in the data set that we analyse
dim(G)
GG <- G[d.map[1:3116, 3], d.map[1:3116, 3]]
# To ensure that the matrix is positive definite, we do a computational trick (proposed by vanRaden 2008, see https://doi.org/10.3168/jds.2007-0980 :)
# diag(n) returns (nxn) identity matrix
AAA <- diag(dim(GG)[1])
GGG <- GG * 0.99 + 0.01 * AAA # replace by Identity matrix
# Need to derive the inverse to give to INLA
Cmatrix <- solve(GGG)
if (!isSymmetric(Cmatrix)) {
Cmatrix <- forceSymmetric(Cmatrix)
}
for (i in 0:9) {
# get CV indices
#ringnr_train <- pull(arrow::read_feather(paste(data_path, "temp/ringnr_train_", i, ".feather", sep = "")), "ringnr")
#ringnr_test <- pull(arrow::read_feather(paste(data_path, "temp/ringnr_test_", i, ".feather", sep = "")), "ringnr")
ringnr_train <- cv_folds %>%
filter(Fold == (i + 1) & Set == "train") %>%
pull(ringnr)
ringnr_test <- cv_folds %>%
filter(Fold == (i + 1) & Set == "test") %>%
pull(ringnr)
# make test and train set
d.morph_train <- filter(d.morph, !ringnr %in% ringnr_test)
d.morph_test <- filter(d.morph, ringnr %in% ringnr_test)
n_train <- dim(d.morph_train)[1]
n_test <- dim(d.morph_test)[1]
N <- n_train + n_test
# Save the phenotypic value in the test set, if we only looking at genetic effects (two-step) we take the average
pheno_test_EG <- d.morph_test[, tarsus]
pheno_test <- as.data.frame(d.morph_test %>%
group_by(ringnr) %>%
summarize(
mean_pheno = mean(eval(tarsus))
))[, "mean_pheno"]
# However, INLA has no predict function, so have to fill the test-values with NAs and then merge it back into the train-set
d.morph_test[, tarsus] <- NA
d.morph_train <- union_all(d.morph_train, d.morph_test)
names(d.morph_train)
# All individuals
idxs <- 1:Nanimals
# get the indices corresponding to the individuals in the test set
idxs_test <- which(d.map$ringnr %in% unique(ringnr_test))
##################################################################
### Run INLA based on the GBLUP approach
###
### To this end, use the GRM (genetic relatedness matrix) in the animal model
###
### !!! This is very slow - account for at least 20-30min waiting time before inla terminates !!!
##################################################################
##
## INLA formula
##
# Here we use body mass as the response, and some fixed and random effects:
cat("Starting INLA\n")
model1.tarsus <- inla(
formula = formula.tarsus, family = "gaussian",
data = d.morph_train,
control.family = list(hyper = list(theta = list(initial = log(0.5), prior = "pc.prec", param = c(sqrt(2), 0.05)))),
control.compute = list(dic = F, return.marginals = FALSE), verbose = TRUE
# control.compute=list(config = TRUE)
)
cat("INLA DONE\n")
# get predicted phenotype
#preds_EG <- model1.wing$summary.fitted.values$mean[(n_train + 1):N]
# Get breeding values
preds <- model1.tarsus$summary.random$IDC2$mode[idxs_test]
# calculate and save metrics
#corr_EG <- cor(preds_EG, pheno_test_EG, method = "pearson")
corr <- cor(preds, pheno_test, method = "pearson")
cat("result of fold", i, "corr_G:", corr, "\n")
corr_cvs_G <- c(corr_cvs_G, corr)
#corr_cvs_EG <- c(corr_cvs_EG, corr_EG)
}
# remove missing values (mass)
d.morph <- filter(d.morph, !is.na(eval(tarsus)))
# names(d.morph)
# In the reduced pedigree only Nanimals out of the 3147 IDs are preset.
d.map$IDC <- 1:nrow(d.map)
d.morph$IDC <- d.map[match(d.morph$ringnr, d.map$ringnr), "IDC"]
### Prepare for use in INLA -
d.morph$IDC4 <- d.morph$IDC3 <- d.morph$IDC2 <- d.morph$IDC
d.morph_test[, tarsus]
d.morph_test[, "tarsus"]
for (i in 0:9) {
# get CV indices
#ringnr_train <- pull(arrow::read_feather(paste(data_path, "temp/ringnr_train_", i, ".feather", sep = "")), "ringnr")
#ringnr_test <- pull(arrow::read_feather(paste(data_path, "temp/ringnr_test_", i, ".feather", sep = "")), "ringnr")
ringnr_train <- cv_folds %>%
filter(Fold == (i + 1) & Set == "train") %>%
pull(ringnr)
ringnr_test <- cv_folds %>%
filter(Fold == (i + 1) & Set == "test") %>%
pull(ringnr)
# make test and train set
d.morph_train <- filter(d.morph, !ringnr %in% ringnr_test)
d.morph_test <- filter(d.morph, ringnr %in% ringnr_test)
n_train <- dim(d.morph_train)[1]
n_test <- dim(d.morph_test)[1]
N <- n_train + n_test
# Save the phenotypic value in the test set, if we only looking at genetic effects (two-step) we take the average
pheno_test_EG <- d.morph_test[, "tarsus"]
pheno_test <- as.data.frame(d.morph_test %>%
group_by(ringnr) %>%
summarize(
mean_pheno = mean(eval(tarsus))
))[, "mean_pheno"]
# However, INLA has no predict function, so have to fill the test-values with NAs and then merge it back into the train-set
d.morph_test[, "tarsus"] <- NA
d.morph_train <- union_all(d.morph_train, d.morph_test)
names(d.morph_train)
# All individuals
idxs <- 1:Nanimals
# get the indices corresponding to the individuals in the test set
idxs_test <- which(d.map$ringnr %in% unique(ringnr_test))
##################################################################
### Run INLA based on the GBLUP approach
###
### To this end, use the GRM (genetic relatedness matrix) in the animal model
###
### !!! This is very slow - account for at least 20-30min waiting time before inla terminates !!!
##################################################################
##
## INLA formula
##
# Here we use body mass as the response, and some fixed and random effects:
cat("Starting INLA\n")
model1.tarsus <- inla(
formula = formula.tarsus, family = "gaussian",
data = d.morph_train,
control.family = list(hyper = list(theta = list(initial = log(0.5), prior = "pc.prec", param = c(sqrt(2), 0.05)))),
control.compute = list(dic = F, return.marginals = FALSE), verbose = TRUE
# control.compute=list(config = TRUE)
)
cat("INLA DONE\n")
# get predicted phenotype
#preds_EG <- model1.wing$summary.fitted.values$mean[(n_train + 1):N]
# Get breeding values
preds <- model1.tarsus$summary.random$IDC2$mode[idxs_test]
# calculate and save metrics
#corr_EG <- cor(preds_EG, pheno_test_EG, method = "pearson")
corr <- cor(preds, pheno_test, method = "pearson")
cat("result of fold", i, "corr_G:", corr, "\n")
corr_cvs_G <- c(corr_cvs_G, corr)
#corr_cvs_EG <- c(corr_cvs_EG, corr_EG)
}
# Script for generating nice multiple box-plots
library(ggplot2)
# Define path
real_path <- "C:/Users/gard_/Documents/MasterThesis/Code/Results/180k/RealPheno/"
# Read data from CSV files
massBV <- read.csv(paste0(real_path, "corr_BV_mass.csv"))
wingBV <- read.csv(paste0(real_path, "corr_BV_wing.csv"))
xgb_mass <- read.csv(paste0(real_path, "corr_XGB_mass.csv"))
xgb_wing <- read.csv(paste0(real_path, "corr_XGB_wing.csv"))
RidgePC_mass <- read.csv(paste0(real_path, "corr_mass_RidgePC.csv"))
RidgePC_wing <- read.csv(paste0(real_path, "corr_wing_RidgePC.csv"))
Ridge_mass <- read.csv(paste0(real_path, "corr_mass_Ridge.csv"))
Ridge_wing <- read.csv(paste0(real_path, "corr_wing_Ridge.csv"))
# Include phenotype 'Tarsus'
tarsusBV <- read.csv(paste0(real_path, "corr_BV_tarsus.csv"))
#BV_csv
# Write the vector to a CSV file
BV_file_name <- paste0("corr_BV_tarsus.csv")
#BV_csv
# Write the vector to a CSV file
setwd("C:/Users/gard_/Documents/MasterThesis/Code/Results/180k/RealPheno")
BV_file_name <- paste0("corr_BV_tarsus.csv")
#write.csv(EG_csv, file = "corr_EG_WING.csv", row.names = FALSE)
write.csv(BV_csv, file = BV_file_name, row.names = FALSE)
#EG_csv <- data.frame(Value = corr_cvs_EG)
BV_csv <- data.frame(corr = corr_cvs_G)
#BV_csv
# Write the vector to a CSV file
setwd("C:/Users/gard_/Documents/MasterThesis/Code/Results/180k/RealPheno")
BV_file_name <- paste0("corr_BV_tarsus.csv")
#write.csv(EG_csv, file = "corr_EG_WING.csv", row.names = FALSE)
write.csv(BV_csv, file = BV_file_name, row.names = FALSE)
# Script for generating nice multiple box-plots
library(ggplot2)
# Define path
real_path <- "C:/Users/gard_/Documents/MasterThesis/Code/Results/180k/RealPheno/"
# Read data from CSV files
massBV <- read.csv(paste0(real_path, "corr_BV_mass.csv"))
wingBV <- read.csv(paste0(real_path, "corr_BV_wing.csv"))
xgb_mass <- read.csv(paste0(real_path, "corr_XGB_mass.csv"))
xgb_wing <- read.csv(paste0(real_path, "corr_XGB_wing.csv"))
RidgePC_mass <- read.csv(paste0(real_path, "corr_mass_RidgePC.csv"))
RidgePC_wing <- read.csv(paste0(real_path, "corr_wing_RidgePC.csv"))
Ridge_mass <- read.csv(paste0(real_path, "corr_mass_Ridge.csv"))
Ridge_wing <- read.csv(paste0(real_path, "corr_wing_Ridge.csv"))
# Include phenotype 'Tarsus'
tarsusBV <- read.csv(paste0(real_path, "corr_BV_tarsus.csv"))
Ridge_tarsus <- read.csv(paste0(real_path, "corr_tarsus_Ridge.csv"))
# Script for generating nice multiple box-plots
library(ggplot2)
# Define path
real_path <- "C:/Users/gard_/Documents/MasterThesis/Code/Results/180k/RealPheno/"
# Read data from CSV files
massBV <- read.csv(paste0(real_path, "corr_BV_mass.csv"))
wingBV <- read.csv(paste0(real_path, "corr_BV_wing.csv"))
xgb_mass <- read.csv(paste0(real_path, "corr_XGB_mass.csv"))
xgb_wing <- read.csv(paste0(real_path, "corr_XGB_wing.csv"))
RidgePC_mass <- read.csv(paste0(real_path, "corr_mass_RidgePC.csv"))
RidgePC_wing <- read.csv(paste0(real_path, "corr_wing_RidgePC.csv"))
Ridge_mass <- read.csv(paste0(real_path, "corr_mass_Ridge.csv"))
Ridge_wing <- read.csv(paste0(real_path, "corr_wing_Ridge.csv"))
# Include phenotype 'Tarsus'
tarsusBV <- read.csv(paste0(real_path, "corr_BV_tarsus.csv"))
Ridge_tarsus <- read.csv(paste0(real_path, "corr_tarsus_Ridge.csv"))
RidgePC_tarsus <- read.csv(paste0(real_path, "corr_tarsus_RidgePC.csv"))
# xgb_tarsus <- read.csv(paste0(real_path, "corr_XGB_tarsus.csv"))  # Uncomment when available
# Create a data frame including Ridge and RidgePC
data <- data.frame(
Category = factor(rep(c("GEBV", "XGB", "Ridge", "RidgePC",
"GEBV", "XGB", "Ridge", "RidgePC",
"GEBV", "XGB", "Ridge", "RidgePC"), each = 10),
levels = c("GEBV", "XGB", "Ridge", "RidgePC")),
Trait = factor(rep(c("Mass", "Mass", "Mass", "Mass",
"Wing", "Wing", "Wing", "Wing",
"Tarsus", "Tarsus", "Tarsus", "Tarsus"), each = 10),
levels = c("Mass", "Wing", "Tarsus")),
Values = c(massBV$corr,
xgb_mass$corr,
Ridge_mass$corr,
RidgePC_mass$corr,
wingBV$corr,
xgb_wing$corr,
Ridge_wing$corr,
RidgePC_wing$corr,
tarsusBV$corr,
rep(NA, 10),  # Placeholder for XGB Tarsus
Ridge_tarsus$corr,
RidgePC_tarsus$corr)
)
# Define color mapping for categories
category_colors <- c("GEBV" = "aquamarine",
"XGB" = "darkcyan",
"Ridge" = "steelblue",
"RidgePC" = "orange")
# Create the box plot
ggplot(data, aes(x = Category, y = Values, fill = Category)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 2) +
scale_fill_manual(values = category_colors) +
labs(
title = "Prediction of genetic contribution",
y = expression(Corr(bar(y), hat(y)^"*")),
x = ""
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
plot.title = element_text(size = 15, hjust = 0.5),   # Title size
strip.text = element_text(size = 15, face = "bold"), # Subtitle text
axis.title.x = element_text(size = 15),             # X-axis label size
axis.title.y = element_text(size = 15),             # Y-axis label size
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),  # Rotate x-axis labels
axis.text.y = element_text(size = 15)               # Y-axis tick label size
) +
geom_hline(yintercept = 0.33, col = "blue", linetype = "dashed") +  # Dashed reference line
facet_grid(~Trait, scales = "free_x", space = "free_x")  # Group by
